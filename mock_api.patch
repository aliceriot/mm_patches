diff --git a/static/js/lib/api.js b/static/js/lib/api.js
index 65742744..b7190c46 100644
--- a/static/js/lib/api.js
+++ b/static/js/lib/api.js
@@ -10,6 +10,12 @@ import type { Coupons } from '../flow/couponTypes';
 import type { Dashboard } from '../flow/dashboardTypes';
 import type { AvailableProgram, AvailablePrograms } from '../flow/enrollmentTypes';
 import type { EmailSendResponse } from '../flow/emailTypes';
+import {
+  DASHBOARD_RESPONSE,
+  PROGRAMS,
+  COURSE_PRICES_RESPONSE,
+  USER_PROGRAM_RESPONSE,
+} from '../test_constants';
 
 export function getCookie(name: string): string|null {
   let cookieValue = null;
@@ -155,15 +161,21 @@ export function patchUserProfile(username: string, profile: Profile): Promise<Pr
 }
 
 export function getDashboard(): Promise<Dashboard> {
-  return fetchJSONWithCSRF('/api/v0/dashboard/', {}, true);
+  // return fetchJSONWithCSRF('/api/v0/dashboard/', {}, true);
+  return Promise.resolve(DASHBOARD_RESPONSE);
 }
 
 export function checkout(courseId: string): Promise<CheckoutResponse> {
-  return fetchJSONWithCSRF('/api/v0/checkout/', {
-    method: 'POST',
-    body: JSON.stringify({
-      course_id: courseId
-    })
+  // return fetchJSONWithCSRF('/api/v0/checkout/', {
+  //   method: 'POST',
+  //   body: JSON.stringify({
+  //     course_id: courseId
+  //   })
+  // });
+  return new Promise(resolve => {
+    setTimeout(() => {
+      resolve();
+    }, 1000);
   });
 }
 
@@ -179,7 +191,8 @@ export function sendSearchResultMail(subject: string, body: string, searchReques
 }
 
 export function getPrograms(): Promise<AvailablePrograms> {
-  return fetchJSONWithCSRF('/api/v0/programs/', {}, true);
+  // return fetchJSONWithCSRF('/api/v0/programs/', {}, true);
+  return Promise.resolve(PROGRAMS);
 }
 
 export function addProgramEnrollment(programId: number): Promise<AvailableProgram> {
@@ -204,18 +217,22 @@ export function updateProfileImage(username: string, image: Blob, name: string):
 }
 
 export function addFinancialAid(income: number, currency: string, programId: number): Promise<*> {
-  return fetchJSONWithCSRF('/api/v0/financial_aid_request/', {
-    method: 'POST',
-    body: JSON.stringify({
-      original_income: income,
-      original_currency: currency,
-      program_id: programId
-    })
+  // return fetchJSONWithCSRF('/api/v0/financial_aid_request/', {
+  //   method: 'POST',
+  //   body: JSON.stringify({
+  //     original_income: income,
+  //     original_currency: currency,
+  //     program_id: programId
+  //   })
+  // });
+  return new Promise(resolve => {
+    setTimeout(resolve, 1000);
   });
 }
 
 export function getCoursePrices(): Promise<*> {
-  return fetchJSONWithCSRF('/api/v0/course_prices/', {});
+  // return fetchJSONWithCSRF('/api/v0/course_prices/', {});
+  return Promise.resolve(COURSE_PRICES_RESPONSE);
 }
 
 export function skipFinancialAid(programId: number): Promise<*> {
diff --git a/static/js/test_constants.js b/static/js/test_constants.js
index 7bed5b06..aa9d08ca 100644
--- a/static/js/test_constants.js
+++ b/static/js/test_constants.js
@@ -633,6 +633,7 @@ export const DASHBOARD_RESPONSE: Dashboard = deepFreeze([
   {
     "title": "Last program",
     "description": "The last program",
+    "pearson_exam_status": "in-progress",
     "courses": [
       {
         "id": 13,
@@ -654,8 +655,12 @@ export const DASHBOARD_RESPONSE: Dashboard = deepFreeze([
         "prerequisites": ""
       },
     ],
-    "financial_aid_availability": false,
-    "id": 6
+    "financial_aid_availability": true,
+    "id": 6,
+    "financial_aid_user_info": {
+      "max_possible_cost": 1000,
+      "min_possible_cost": 1000,
+    }
   },
   {
     "title": "Paid but not enrolled",
