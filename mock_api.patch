diff --git a/static/js/lib/api.js b/static/js/lib/api.js
index d8d6b93c..de0ca300 100644
--- a/static/js/lib/api.js
+++ b/static/js/lib/api.js
@@ -12,6 +12,12 @@ import type { Dashboard, CoursePrices } from '../flow/dashboardTypes';
 import type { AvailableProgram, AvailablePrograms } from '../flow/enrollmentTypes';
 import type { EmailSendResponse } from '../flow/emailTypes';
 import type { PearsonSSOParameters } from '../flow/pearsonTypes';
+import {
+  DASHBOARD_RESPONSE,
+  PROGRAMS,
+  COURSE_PRICES_RESPONSE,
+  USER_PROGRAM_RESPONSE,
+} from '../test_constants';
 
 export function getCookie(name: string): string|null {
   let cookieValue = null;
@@ -158,15 +164,22 @@ export function patchUserProfile(username: string, profile: Profile): Promise<Pr
 }
 
 export function getDashboard(username: string): Promise<Dashboard> {
-  return fetchJSONWithCSRF(`/api/v0/dashboard/${username}/`, {}, true);
+  // return fetchJSONWithCSRF(`/api/v0/dashboard/${username}/`, {}, true);
+  return Promise.resolve(DASHBOARD_RESPONSE);
 }
 
 export function checkout(courseId: string): Promise<CheckoutResponse> {
-  return fetchJSONWithCSRF('/api/v0/checkout/', {
-    method: 'POST',
-    body: JSON.stringify({
-      course_id: courseId
-    })
+  // return fetchJSONWithCSRF('/api/v0/checkout/', {
+  //   method: 'POST',
+  //   body: JSON.stringify({
+  //     course_id: courseId
+  //   })
+  // });
+
+  return new Promise(resolve => {
+    setTimeout(() => {
+      resolve();
+    }, 1000);
   });
 }
 
@@ -192,7 +205,8 @@ export function sendCourseTeamMail(subject: string, body: string, courseId: numb
 }
 
 export function getPrograms(): Promise<AvailablePrograms> {
-  return fetchJSONWithCSRF('/api/v0/programs/', {}, true);
+  // return fetchJSONWithCSRF('/api/v0/programs/', {}, true);
+  return Promise.resolve(PROGRAMS);
 }
 
 export function addProgramEnrollment(programId: number): Promise<AvailableProgram> {
@@ -222,21 +236,25 @@ export function getPearsonSSO(): Promise<PearsonSSOParameters> {
 }
 
 export function addFinancialAid(income: number, currency: string, programId: number): Promise<*> {
-  return fetchJSONWithCSRF('/api/v0/financial_aid_request/', {
-    method: 'POST',
-    body: JSON.stringify({
-      original_income: income,
-      original_currency: currency,
-      program_id: programId
-    })
+  // return fetchJSONWithCSRF('/api/v0/financial_aid_request/', {
+  //   method: 'POST',
+  //   body: JSON.stringify({
+  //     original_income: income,
+  //     original_currency: currency,
+  //     program_id: programId
+  //   })
+  // });
+  return new Promise(resolve => {
+    setTimeout(resolve, 1000);
   });
 }
 
 export function getCoursePrices(): Promise<CoursePrices> {
-  return fetchJSONWithCSRF('/api/v0/course_prices/', {}).then(coursePrices => {
-    // turn `price` from string into decimal
-    return R.map(R.evolve({price: Decimal}), coursePrices);
-  });
+  // return fetchJSONWithCSRF('/api/v0/course_prices/', {}).then(coursePrices => {
+  //   // turn `price` from string into decimal
+  //   return R.map(R.evolve({price: Decimal}), coursePrices);
+  // });
+  return Promise.resolve(COURSE_PRICES_RESPONSE);
 }
 
 export function skipFinancialAid(programId: number): Promise<*> {
diff --git a/static/js/test_constants.js b/static/js/test_constants.js
index bc07de17..aad149d3 100644
--- a/static/js/test_constants.js
+++ b/static/js/test_constants.js
@@ -636,7 +636,7 @@ export const DASHBOARD_RESPONSE: Dashboard = deepFreeze([
   {
     "title": "Last program",
     "description": "The last program",
-    "pearson_exam_status": "",
+    "pearson_exam_status": "in-progress",
     "courses": [
       {
         "id": 13,
@@ -658,8 +658,12 @@ export const DASHBOARD_RESPONSE: Dashboard = deepFreeze([
         "prerequisites": ""
       },
     ],
-    "financial_aid_availability": false,
-    "id": 6
+    "financial_aid_availability": true,
+    "id": 6,
+    "financial_aid_user_info": {
+      "max_possible_cost": 1000,
+      "min_possible_cost": 1000,
+    }
   },
   {
     "title": "Paid but not enrolled",
