diff --git a/static/js/lib/api.js b/static/js/lib/api.js
index 15b3b51c..fd073740 100644
--- a/static/js/lib/api.js
+++ b/static/js/lib/api.js
@@ -4,7 +4,6 @@
 import 'isomorphic-fetch';
 import R from 'ramda';
 import Decimal from 'decimal.js-light';
-
 import type { Profile, ProfileGetResult, ProfilePatchResult } from '../flow/profileTypes';
 import type { CheckoutResponse } from '../flow/checkoutTypes';
 import type { Coupons, AttachCouponResponse } from '../flow/couponTypes';
@@ -12,6 +11,12 @@ import type { Dashboard, CoursePrices } from '../flow/dashboardTypes';
 import type { AvailableProgram, AvailablePrograms } from '../flow/enrollmentTypes';
 import type { EmailSendResponse } from '../flow/emailTypes';
 import type { PearsonSSOParameters } from '../flow/pearsonTypes';
+import {
+  DASHBOARD_RESPONSE,
+  PROGRAMS,
+  COURSE_PRICES_RESPONSE,
+  USER_PROGRAM_RESPONSE,
+} from '../test_constants';
 
 export function getCookie(name: string): string|null {
   let cookieValue = null;
@@ -158,15 +163,21 @@ export function patchUserProfile(username: string, profile: Profile): Promise<Pr
 }
 
 export function getDashboard(): Promise<Dashboard> {
-  return fetchJSONWithCSRF('/api/v0/dashboard/', {}, true);
+  // return fetchJSONWithCSRF('/api/v0/dashboard/', {}, true);
+  return Promise.resolve(DASHBOARD_RESPONSE);
 }
 
 export function checkout(courseId: string): Promise<CheckoutResponse> {
-  return fetchJSONWithCSRF('/api/v0/checkout/', {
-    method: 'POST',
-    body: JSON.stringify({
-      course_id: courseId
-    })
+  // return fetchJSONWithCSRF('/api/v0/checkout/', {
+  //   method: 'POST',
+  //   body: JSON.stringify({
+  //     course_id: courseId
+  //   })
+  // });
+  return new Promise(resolve => {
+    setTimeout(() => {
+      resolve();
+    }, 1000);
   });
 }
 
@@ -192,7 +203,8 @@ export function sendCourseTeamMail(subject: string, body: string, courseId: numb
 }
 
 export function getPrograms(): Promise<AvailablePrograms> {
-  return fetchJSONWithCSRF('/api/v0/programs/', {}, true);
+  // return fetchJSONWithCSRF('/api/v0/programs/', {}, true);
+  return Promise.resolve(PROGRAMS);
 }
 
 export function addProgramEnrollment(programId: number): Promise<AvailableProgram> {
@@ -222,28 +234,34 @@ export function getPearsonSSO(): Promise<PearsonSSOParameters> {
 }
 
 export function addFinancialAid(income: number, currency: string, programId: number): Promise<*> {
-  return fetchJSONWithCSRF('/api/v0/financial_aid_request/', {
-    method: 'POST',
-    body: JSON.stringify({
-      original_income: income,
-      original_currency: currency,
-      program_id: programId
-    })
+  // return fetchJSONWithCSRF('/api/v0/financial_aid_request/', {
+  //   method: 'POST',
+  //   body: JSON.stringify({
+  //     original_income: income,
+  //     original_currency: currency,
+  //     program_id: programId
+  //   })
+  // });
+  return new Promise(resolve => {
+    setTimeout(resolve, 1000);
   });
 }
 
 export function getCoursePrices(): Promise<CoursePrices> {
-  return fetchJSONWithCSRF('/api/v0/course_prices/', {}).then(coursePrices => {
-    // turn `price` from string into decimal
-    return R.map(R.evolve({price: Decimal}), coursePrices);
-  });
+  // return fetchJSONWithCSRF('/api/v0/course_prices/', {}).then(coursePrices => {
+  //   // turn `price` from string into decimal
+  //   return R.map(R.evolve({price: Decimal}), coursePrices);
+  // });
+  return Promise.resolve(COURSE_PRICES_RESPONSE);
 }
 
 export function skipFinancialAid(programId: number): Promise<*> {
-  return fetchJSONWithCSRF(`/api/v0/financial_aid_skip/${programId}/`, {
-    method: 'PATCH',
-  });
+  // return fetchJSONWithCSRF(`/api/v0/financial_aid_skip/${programId}/`, {
+  //   method: 'PATCH',
+  // });
+  return Promise.reject();
 }
+
 export function updateDocumentSentDate(financialAidId: number, sentDate: string): Promise<*> {
   return fetchJSONWithCSRF(`/api/v0/financial_aid/${financialAidId}/`, {
     method: 'PATCH',
diff --git a/static/js/test_constants.js b/static/js/test_constants.js
index bc07de17..a4896e49 100644
--- a/static/js/test_constants.js
+++ b/static/js/test_constants.js
@@ -636,7 +636,7 @@ export const DASHBOARD_RESPONSE: Dashboard = deepFreeze([
   {
     "title": "Last program",
     "description": "The last program",
-    "pearson_exam_status": "",
+    "pearson_exam_status": "in-progress",
     "courses": [
       {
         "id": 13,
@@ -684,7 +684,11 @@ export const DASHBOARD_RESPONSE: Dashboard = deepFreeze([
       }]
     }],
     "financial_aid_availability": true,
-    "id": 7
+    "id": 7,
+    "financial_aid_user_info": {
+      "max_possible_cost": 1000,
+      "min_possible_cost": 1000,
+    }
   },
 ]);
 
