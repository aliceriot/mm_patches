diff --git a/static/js/lib/api.js b/static/js/lib/api.js
index 7973504e..a76dcdbf 100644
--- a/static/js/lib/api.js
+++ b/static/js/lib/api.js
@@ -12,6 +12,12 @@ import type { Dashboard, CoursePrices } from '../flow/dashboardTypes';
 import type { AvailableProgram, AvailablePrograms } from '../flow/enrollmentTypes';
 import type { EmailSendResponse } from '../flow/emailTypes';
 import type { PearsonSSOParameters } from '../flow/pearsonTypes';
+import {
+  DASHBOARD_RESPONSE,
+  PROGRAMS,
+  COURSE_PRICES_RESPONSE,
+  USER_PROGRAM_RESPONSE,
+} from '../test_constants';
 
 export function getCookie(name: string): string|null {
   let cookieValue = null;
@@ -159,15 +165,22 @@ export function patchUserProfile(username: string, profile: Profile): Promise<Pr
 }
 
 export function getDashboard(username: string): Promise<Dashboard> {
-  return fetchJSONWithCSRF(`/api/v0/dashboard/${username}/`, {}, true);
+  // return fetchJSONWithCSRF(`/api/v0/dashboard/${username}/`, {}, true);
+  return Promise.resolve(DASHBOARD_RESPONSE);
 }
 
 export function checkout(courseId: string): Promise<CheckoutResponse> {
-  return fetchJSONWithCSRF('/api/v0/checkout/', {
-    method: 'POST',
-    body: JSON.stringify({
-      course_id: courseId
-    })
+  // return fetchJSONWithCSRF('/api/v0/checkout/', {
+  //   method: 'POST',
+  //   body: JSON.stringify({
+  //     course_id: courseId
+  //   })
+  // });
+
+  return new Promise(resolve => {
+    setTimeout(() => {
+      resolve();
+    }, 1000);
   });
 }
 
@@ -206,7 +219,8 @@ export function sendLearnerMail(subject: string, body: string, studentId: number
 }
 
 export function getPrograms(): Promise<AvailablePrograms> {
-  return fetchJSONWithCSRF('/api/v0/programs/', {}, true);
+  // return fetchJSONWithCSRF('/api/v0/programs/', {}, true);
+  return Promise.resolve(PROGRAMS);
 }
 
 export function addProgramEnrollment(programId: number): Promise<AvailableProgram> {
@@ -236,21 +250,25 @@ export function getPearsonSSO(): Promise<PearsonSSOParameters> {
 }
 
 export function addFinancialAid(income: number, currency: string, programId: number): Promise<*> {
-  return fetchJSONWithCSRF('/api/v0/financial_aid_request/', {
-    method: 'POST',
-    body: JSON.stringify({
-      original_income: income,
-      original_currency: currency,
-      program_id: programId
-    })
+  // return fetchJSONWithCSRF('/api/v0/financial_aid_request/', {
+  //   method: 'POST',
+  //   body: JSON.stringify({
+  //     original_income: income,
+  //     original_currency: currency,
+  //     program_id: programId
+  //   })
+  // });
+  return new Promise(resolve => {
+    setTimeout(resolve, 1000);
   });
 }
 
 export function getCoursePrices(): Promise<CoursePrices> {
-  return fetchJSONWithCSRF('/api/v0/course_prices/', {}).then(coursePrices => {
-    // turn `price` from string into decimal
-    return R.map(R.evolve({price: Decimal}), coursePrices);
-  });
+  // return fetchJSONWithCSRF('/api/v0/course_prices/', {}).then(coursePrices => {
+  //   // turn `price` from string into decimal
+  //   return R.map(R.evolve({price: Decimal}), coursePrices);
+  // });
+  return Promise.resolve(COURSE_PRICES_RESPONSE);
 }
 
 export function skipFinancialAid(programId: number): Promise<*> {
diff --git a/static/js/test_constants.js b/static/js/test_constants.js
index 04032806..42ce89c3 100644
--- a/static/js/test_constants.js
+++ b/static/js/test_constants.js
@@ -642,12 +642,14 @@ export const DASHBOARD_RESPONSE: Dashboard = deepFreeze({
     {
       "title": "Last program",
       "description": "The last program",
-      "pearson_exam_status": "",
+      "pearson_exam_status": "schedulable",
+      "grade_average": 98,
       "courses": [
         {
           "id": 13,
           "position_in_program": 0,
           "title": "Course for last program in progress - no grade, action or description",
+          "can_schedule_exam": true,
           "runs": [
             {
               "course_id": "course-v1:edX+DemoX+Demo_Course2",
@@ -658,14 +660,20 @@ export const DASHBOARD_RESPONSE: Dashboard = deepFreeze({
               "course_start_date": "2016-01-01",
               "fuzzy_start_date": "Fall 2017",
               "course_end_date": "2016-09-09T10:20:10Z",
+              "has_paid": true,
             }
           ],
           "description": "Course for Last program",
-          "prerequisites": ""
+          "prerequisites": "",
+          "has_contact_email": true,
         },
       ],
-      "financial_aid_availability": false,
-      "id": 6
+      "financial_aid_availability": true,
+      "id": 6,
+      "financial_aid_user_info": {
+        "max_possible_cost": 1000,
+        "min_possible_cost": 200,
+      }
     },
     {
       "title": "Paid but not enrolled",
@@ -689,7 +697,7 @@ export const DASHBOARD_RESPONSE: Dashboard = deepFreeze({
           "status": STATUS_PAID_BUT_NOT_ENROLLED
         }]
       }],
-      "financial_aid_availability": true,
+      "financial_aid_availability": false,
       "id": 7
     },
   ]
