diff --git a/static/js/lib/api.js b/static/js/lib/api.js
index 99f26605..04c435c5 100644
--- a/static/js/lib/api.js
+++ b/static/js/lib/api.js
@@ -12,6 +12,12 @@ import type { AvailableProgram, AvailablePrograms } from '../flow/enrollmentType
 import type { EmailSendResponse } from '../flow/emailTypes';
 import type { PearsonSSOParameters } from '../flow/pearsonTypes';
 import { fetchWithCSRF, fetchJSONWithCSRF } from 'redux-hammock/django_csrf_fetch';
+import {
+  DASHBOARD_RESPONSE,
+  PROGRAMS,
+  COURSE_PRICES_RESPONSE,
+  USER_PROGRAM_RESPONSE,
+} from '../test_constants.js';
 
 const loginOnEdXError = (response: Response) => {
   if (response.errorStatusCode === 400 || response.errorStatusCode === 401) {
@@ -37,21 +43,27 @@ export function patchUserProfile(username: string, profile: Profile): Promise<Pr
 }
 
 export async function getDashboard(username: string): Promise<Dashboard> {
-  try {
-    let response = await fetchJSONWithCSRF(`/api/v0/dashboard/${username}/`);
-    return response;
-  } catch (response) {
-    loginOnEdXError(response);
-    return response;
-  }
+  // try {
+  //   let response = await fetchJSONWithCSRF(`/api/v0/dashboard/${username}/`);
+  //   return response;
+  // } catch (response) {
+  //   loginOnEdXError(response);
+  //   return response;
+  // }
+  return Promise.resolve(DASHBOARD_RESPONSE);
 }
 
 export function checkout(courseId: string): Promise<CheckoutResponse> {
-  return fetchJSONWithCSRF('/api/v0/checkout/', {
-    method: 'POST',
-    body: JSON.stringify({
-      course_id: courseId
-    })
+  // return fetchJSONWithCSRF('/api/v0/checkout/', {
+  //   method: 'POST',
+  //   body: JSON.stringify({
+  //     course_id: courseId
+  //   })
+  // });
+  return new Promise(resolve => {
+    setTimeout(() => {
+      resolve();
+    }, 1000);
   });
 }
 
@@ -90,13 +102,14 @@ export function sendLearnerMail(subject: string, body: string, studentId: number
 }
 
 export async function getPrograms(): Promise<AvailablePrograms> {
-  try {
-    let response = await fetchJSONWithCSRF('/api/v0/programs/');
-    return response;
-  } catch (response) {
-    loginOnEdXError(response);
-    return response;
-  }
+  // try {
+  //   let response = await fetchJSONWithCSRF('/api/v0/programs/');
+  //   return response;
+  // } catch (response) {
+  //   loginOnEdXError(response);
+  //   return response;
+  // }
+  return Promise.resolve(PROGRAMS);
 }
 
 export function addProgramEnrollment(programId: number): Promise<AvailableProgram> {
@@ -126,21 +139,25 @@ export function getPearsonSSO(): Promise<PearsonSSOParameters> {
 }
 
 export function addFinancialAid(income: number, currency: string, programId: number): Promise<*> {
-  return fetchJSONWithCSRF('/api/v0/financial_aid_request/', {
-    method: 'POST',
-    body: JSON.stringify({
-      original_income: income,
-      original_currency: currency,
-      program_id: programId
-    })
+  // return fetchJSONWithCSRF('/api/v0/financial_aid_request/', {
+  //   method: 'POST',
+  //   body: JSON.stringify({
+  //     original_income: income,
+  //     original_currency: currency,
+  //     program_id: programId
+  //   })
+  // });
+  return new Promise(resolve => {
+    setTimeout(resolve, 1000);
   });
 }
 
 export function getCoursePrices(username: string): Promise<CoursePrices> {
-  return fetchJSONWithCSRF(`/api/v0/course_prices/${username}/`).then(coursePrices => {
-    // turn `price` from string into decimal
-    return R.map(R.evolve({price: Decimal}), coursePrices);
-  });
+  // return fetchJSONWithCSRF(`/api/v0/course_prices/${username}/`).then(coursePrices => {
+    // // turn `price` from string into decimal
+    // return R.map(R.evolve({price: Decimal}), coursePrices);
+  // });
+  return Promise.resolve(COURSE_PRICES_RESPONSE);
 }
 
 export function skipFinancialAid(programId: number): Promise<*> {
